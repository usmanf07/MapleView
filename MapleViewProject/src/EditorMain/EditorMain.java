/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package EditorMain;
import EditorMain.DrawRect;
import Tools.BrushTool;
import Tools.Camera;
import Tools.ColorChooser;
import Tools.ColorPickerTool;
import Tools.EraserTool;
import Tools.PaintBucketTool;
import com.github.sarxos.webcam.Webcam;
import java.awt.*;
import javax.swing.*;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import static javax.swing.JFileChooser.APPROVE_OPTION;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import loginScreen.SignUpFrame;

/**
 *
 * @author usman
 */
public class EditorMain extends javax.swing.JFrame{

    /**
     * Creates new form EditorMain
     */
    public static int count = 1;
    public static int baseWidth;
    public static int baseHeight;
    public static HashMap<Integer, Image> OpenedImages;
    public static Image currentImage;
    public static HashMap<Integer, Image> loadedImages = new HashMap<Integer, Image>();
    public static int selectedTabIndex;
    HashMap<Integer, Boolean> brushtool = new HashMap<Integer, Boolean>();
    HashMap<Integer, Boolean> erasertool = new HashMap<Integer, Boolean>();
    boolean loadGallery = false;
    DrawRect D1;
    public EditorMain() 
    {
        
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ConfigPanel = new javax.swing.JPanel();
        socialBtn = new javax.swing.JButton();
        toolsPanel = new javax.swing.JPanel();
        tipPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        brushToolPanel = new javax.swing.JPanel();
        typelbl = new javax.swing.JLabel();
        brushTypeCombo = new javax.swing.JComboBox<>();
        jSeparator4 = new javax.swing.JSeparator();
        typelbl1 = new javax.swing.JLabel();
        brushsize = new javax.swing.JSpinner();
        eraserToolPanel = new javax.swing.JPanel();
        eraserSize = new javax.swing.JSpinner();
        SizeLbl = new javax.swing.JLabel();
        bucketpanel = new javax.swing.JPanel();
        EditorPanel = new javax.swing.JPanel();
        cropBtn = new javax.swing.JButton();
        paintBrushBtn = new javax.swing.JButton();
        paintBucketBtn = new javax.swing.JButton();
        ColorPickerBtn = new javax.swing.JButton();
        eraserTool = new javax.swing.JButton();
        cropBtn4 = new javax.swing.JButton();
        cropBtn5 = new javax.swing.JButton();
        colorChooserBtn = new javax.swing.JButton();
        bottomPanel = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        galleryFrame = new javax.swing.JInternalFrame();
        jScrollBar1 = new javax.swing.JScrollBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newImgBtn = new javax.swing.JMenuItem();
        openImgBtn = new javax.swing.JMenuItem();
        openCamera = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        saveImgBtn = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        uploadImgBtn = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        undoBtn = new javax.swing.JMenuItem();
        redoBtn = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        rotate1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        filtersMenu = new javax.swing.JMenu();
        bwBtn = new javax.swing.JMenuItem();
        sepiaBtn = new javax.swing.JMenuItem();
        medianBtn = new javax.swing.JMenuItem();
        negativeBtn = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        rgbColors = new javax.swing.JMenu();
        blueBtn = new javax.swing.JMenuItem();
        redBtn = new javax.swing.JMenuItem();
        greenBtn = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        socialBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        socialBtn.setText("Social Gallery");
        socialBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                socialBtnActionPerformed(evt);
            }
        });

        toolsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        toolsPanel.setLayout(new java.awt.CardLayout());

        jLabel3.setText("Tip of The Day");

        javax.swing.GroupLayout tipPanelLayout = new javax.swing.GroupLayout(tipPanel);
        tipPanel.setLayout(tipPanelLayout);
        tipPanelLayout.setHorizontalGroup(
            tipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tipPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel3)
                .addContainerGap(638, Short.MAX_VALUE))
        );
        tipPanelLayout.setVerticalGroup(
            tipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tipPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel3)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        toolsPanel.add(tipPanel, "card3");

        typelbl.setText("Brush:");

        brushTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Normal", "Calligraphy" }));

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        typelbl1.setText("Size:");

        brushsize.setModel(new javax.swing.SpinnerNumberModel(10, 1, 350, 1));
        brushsize.setValue(10);

        javax.swing.GroupLayout brushToolPanelLayout = new javax.swing.GroupLayout(brushToolPanel);
        brushToolPanel.setLayout(brushToolPanelLayout);
        brushToolPanelLayout.setHorizontalGroup(
            brushToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(brushToolPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(typelbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(brushTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typelbl1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(brushsize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(497, Short.MAX_VALUE))
        );
        brushToolPanelLayout.setVerticalGroup(
            brushToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(brushToolPanelLayout.createSequentialGroup()
                .addGroup(brushToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, brushToolPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator4))
                    .addGroup(brushToolPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(brushToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(brushToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(typelbl)
                                .addComponent(brushTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(brushToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(typelbl1)
                                .addComponent(brushsize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        toolsPanel.add(brushToolPanel, "brushtool");

        eraserSize.setModel(new javax.swing.SpinnerNumberModel(10, 1, 350, 1));
        eraserSize.setValue(10);

        SizeLbl.setText("Size:");

        javax.swing.GroupLayout eraserToolPanelLayout = new javax.swing.GroupLayout(eraserToolPanel);
        eraserToolPanel.setLayout(eraserToolPanelLayout);
        eraserToolPanelLayout.setHorizontalGroup(
            eraserToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eraserToolPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(SizeLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eraserSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(626, Short.MAX_VALUE))
        );
        eraserToolPanelLayout.setVerticalGroup(
            eraserToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, eraserToolPanelLayout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(eraserToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SizeLbl)
                    .addComponent(eraserSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11))
        );

        toolsPanel.add(eraserToolPanel, "erasertool");

        javax.swing.GroupLayout bucketpanelLayout = new javax.swing.GroupLayout(bucketpanel);
        bucketpanel.setLayout(bucketpanelLayout);
        bucketpanelLayout.setHorizontalGroup(
            bucketpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 747, Short.MAX_VALUE)
        );
        bucketpanelLayout.setVerticalGroup(
            bucketpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 46, Short.MAX_VALUE)
        );

        toolsPanel.add(bucketpanel, "buckettool");

        javax.swing.GroupLayout ConfigPanelLayout = new javax.swing.GroupLayout(ConfigPanel);
        ConfigPanel.setLayout(ConfigPanelLayout);
        ConfigPanelLayout.setHorizontalGroup(
            ConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(toolsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(socialBtn)
                .addGap(23, 23, 23))
        );
        ConfigPanelLayout.setVerticalGroup(
            ConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(socialBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ConfigPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(toolsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        EditorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(102, 102, 102)));

        cropBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-crop-25.png"))); // NOI18N
        cropBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropBtnActionPerformed(evt);
            }
        });

        paintBrushBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-paint-25.png"))); // NOI18N
        paintBrushBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paintBrushBtnActionPerformed(evt);
            }
        });

        paintBucketBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-fill-color-25.png"))); // NOI18N
        paintBucketBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paintBucketBtnActionPerformed(evt);
            }
        });

        ColorPickerBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-color-dropper-25.png"))); // NOI18N
        ColorPickerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColorPickerBtnActionPerformed(evt);
            }
        });

        eraserTool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-eraser-25.png"))); // NOI18N
        eraserTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraserToolActionPerformed(evt);
            }
        });

        cropBtn4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-shape-25.png"))); // NOI18N
        cropBtn4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropBtn4ActionPerformed(evt);
            }
        });

        cropBtn5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-zoom-to-extents-25.png"))); // NOI18N
        cropBtn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropBtn5ActionPerformed(evt);
            }
        });

        colorChooserBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-paint-palette-25.png"))); // NOI18N
        colorChooserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorChooserBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout EditorPanelLayout = new javax.swing.GroupLayout(EditorPanel);
        EditorPanel.setLayout(EditorPanelLayout);
        EditorPanelLayout.setHorizontalGroup(
            EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EditorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(colorChooserBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cropBtn5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cropBtn4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ColorPickerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paintBucketBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eraserTool, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paintBrushBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cropBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        EditorPanelLayout.setVerticalGroup(
            EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EditorPanelLayout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(cropBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(paintBrushBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(eraserTool, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(paintBucketBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ColorPickerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cropBtn4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cropBtn5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(colorChooserBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        bottomPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(102, 102, 102)));

        jLabel4.setText("Zoom:");

        jButton1.setText("100%");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bottomPanelLayout = new javax.swing.GroupLayout(bottomPanel);
        bottomPanel.setLayout(bottomPanelLayout);
        bottomPanelLayout.setHorizontalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        bottomPanelLayout.setVerticalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jButton1))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(102, 102, 102)));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        galleryFrame.setVisible(false);

        javax.swing.GroupLayout galleryFrameLayout = new javax.swing.GroupLayout(galleryFrame.getContentPane());
        galleryFrame.getContentPane().setLayout(galleryFrameLayout);
        galleryFrameLayout.setHorizontalGroup(
            galleryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, galleryFrameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        galleryFrameLayout.setVerticalGroup(
            galleryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(galleryFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(galleryFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(galleryFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        newImgBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        newImgBtn.setText("New Image");
        newImgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newImgBtnActionPerformed(evt);
            }
        });
        jMenu1.add(newImgBtn);

        openImgBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openImgBtn.setText("Open Image");
        openImgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openImgBtnActionPerformed(evt);
            }
        });
        jMenu1.add(openImgBtn);

        openCamera.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openCamera.setText("Open Camera");
        openCamera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCameraActionPerformed(evt);
            }
        });
        jMenu1.add(openCamera);
        jMenu1.add(jSeparator1);

        saveImgBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveImgBtn.setText("Save");
        saveImgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImgBtnActionPerformed(evt);
            }
        });
        jMenu1.add(saveImgBtn);

        jMenuItem5.setText("Export As");
        jMenu1.add(jMenuItem5);

        uploadImgBtn.setText("Upload To Social Gallery");
        uploadImgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadImgBtnActionPerformed(evt);
            }
        });
        jMenu1.add(uploadImgBtn);
        jMenu1.add(jSeparator2);

        jMenuItem6.setText("Print");
        jMenu1.add(jMenuItem6);

        jMenuItem7.setText("Reload");
        jMenu1.add(jMenuItem7);
        jMenu1.add(jSeparator3);

        jMenuItem8.setText("Close");
        jMenu1.add(jMenuItem8);

        jMenuItem9.setText("Close All");
        jMenu1.add(jMenuItem9);

        jMenuItem10.setText("Exit");
        jMenu1.add(jMenuItem10);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        undoBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        undoBtn.setText("Undo");
        jMenu2.add(undoBtn);

        redoBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        redoBtn.setText("Redo");
        redoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoBtnActionPerformed(evt);
            }
        });
        jMenu2.add(redoBtn);
        jMenu2.add(jSeparator6);

        rotate1.setText("Rotate 90 Right");
        rotate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotate1ActionPerformed(evt);
            }
        });
        jMenu2.add(rotate1);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Layer");
        jMenuBar1.add(jMenu3);

        jMenu4.setText("Image");
        jMenuBar1.add(jMenu4);

        filtersMenu.setText("Filter Gallery");

        bwBtn.setText("Black & White");
        bwBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bwBtnActionPerformed(evt);
            }
        });
        filtersMenu.add(bwBtn);

        sepiaBtn.setText("Sepia");
        sepiaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sepiaBtnActionPerformed(evt);
            }
        });
        filtersMenu.add(sepiaBtn);

        medianBtn.setText("Median (Remove Noise)");
        medianBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medianBtnActionPerformed(evt);
            }
        });
        filtersMenu.add(medianBtn);

        negativeBtn.setText("Negative");
        negativeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negativeBtnActionPerformed(evt);
            }
        });
        filtersMenu.add(negativeBtn);
        filtersMenu.add(jSeparator5);

        rgbColors.setText("RGB Colors");

        blueBtn.setText("Blue");
        blueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueBtnActionPerformed(evt);
            }
        });
        rgbColors.add(blueBtn);

        redBtn.setText("Red");
        redBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redBtnActionPerformed(evt);
            }
        });
        rgbColors.add(redBtn);

        greenBtn.setText("Green");
        greenBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenBtnActionPerformed(evt);
            }
        });
        rgbColors.add(greenBtn);

        filtersMenu.add(rgbColors);

        jMenuBar1.add(filtersMenu);

        jMenu6.setText("View");
        jMenuBar1.add(jMenu6);

        jMenu7.setText("Help");
        jMenuBar1.add(jMenu7);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ConfigPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(EditorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ConfigPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EditorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cropBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropBtnActionPerformed
       
        JPanel cropToolPanel = new JPanel();
        JButton cropImgBtn = new JButton();
        cropImgBtn.setText("Crop");

        javax.swing.GroupLayout cropToolPanelLayout = new javax.swing.GroupLayout(cropToolPanel);
        cropToolPanel.setLayout(cropToolPanelLayout);
        cropToolPanelLayout.setHorizontalGroup(
            cropToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cropToolPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cropImgBtn)
                .addContainerGap(660, Short.MAX_VALUE))
        );
        cropToolPanelLayout.setVerticalGroup(
            cropToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cropToolPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cropImgBtn)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        toolsPanel.add(cropToolPanel, "croptool");
        
        CardLayout card = (CardLayout)toolsPanel.getLayout();
        card.show(toolsPanel, "croptool");
        
        int index=jTabbedPane1.getSelectedIndex();
        if(brushtool.containsKey(index))
        {
         if(brushtool.get(index))
         {
             brushtool.put(index, false);
         }
        }
        if(index!=-1)
        {
            Component temp= jTabbedPane1.getComponentAt(index);
            JScrollPane selected=(JScrollPane)temp;
            JViewport mypanel =(JViewport)selected.getComponent(0);
            JPanel t = (JPanel)mypanel.getComponent(0);
            DrawArea c =(DrawArea) t.getComponent(0);
            int h=c.getHeight();
            int w=c.getWidth();
            c.removeAll();
            c.repaint();
           // System.out.print(h);
            DrawRect D1=new DrawRect();
            D1.setPreferredSize(new Dimension(w, h));
            c.setLayout(new java.awt.GridBagLayout());
            c.setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
            c.add(D1, new java.awt.GridBagConstraints());
            c.repaint();
            
            cropImgBtn.addActionListener(new java.awt.event.ActionListener() 
            {
                public void actionPerformed(java.awt.event.ActionEvent evt) 
                {
                    //currentImage=c.getImage();
                    selectedTabIndex = jTabbedPane1.getSelectedIndex();
                    loadedImages.put(selectedTabIndex, c.getImage());
             //       System.out.print(currentImage);
                    BufferedImage curr = (BufferedImage) c.getImage();
                    int width=D1.eX-D1.sX;
                    int height=D1.eY-D1.sY;
                    
                    if(width > 0 && height > 0)
                    {
                        BufferedImage img = curr.getSubimage(D1.sX, D1.sY, width, height);
                        c.Drawer(img);
                        c.setPreferredSize(new Dimension(width, height));
                        c.setSize(new Dimension(width, height));
                        c.repaint();
                        c.remove(D1);
                        c.repaint();

                        toolsPanel.remove(cropImgBtn);
                        toolsPanel.remove(cropToolPanel);
                        toolsPanel.repaint();
                        c.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                    }
                    else
                        JOptionPane.showMessageDialog(null, "Crop Area Outside Image Bounds!");
                }
 
            });
            
        }
        
    }//GEN-LAST:event_cropBtnActionPerformed
    public Image getSelectedImage()
    {
        selectedTabIndex = jTabbedPane1.getSelectedIndex();
        if(selectedTabIndex != -1)
        {
            Component temp= jTabbedPane1.getComponentAt(selectedTabIndex);
            JScrollPane selected=(JScrollPane)temp;
            JViewport mypanel =(JViewport)selected.getComponent(0);
            JPanel t = (JPanel)mypanel.getComponent(0);
            DrawArea c =(DrawArea) t.getComponent(0);
            return c.image; 
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No Images are available!");
        }
        return null;
    }
    private void paintBrushBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paintBrushBtnActionPerformed
        int index = jTabbedPane1.getSelectedIndex();
        if(index != -1){
            Component temp= jTabbedPane1.getComponentAt(index);
            JScrollPane selected=(JScrollPane)temp;
            JViewport mypanel =(JViewport)selected.getComponent(0);
            JPanel t = (JPanel)mypanel.getComponent(0);
            DrawArea c =(DrawArea) t.getComponent(0);
        
        c.removeAll();
        selectedTabIndex = jTabbedPane1.getSelectedIndex();
        
        loadedImages.put(selectedTabIndex, c.getImage());
        CardLayout card = (CardLayout)toolsPanel.getLayout();
        card.show(toolsPanel, "brushtool");
        //index = jTabbedPane1.getSelectedIndex();
        boolean flag = false;
        if(brushtool.containsKey(index))
        {
            flag = brushtool.get(index);
        }
       
        if(index != -1 && !flag)
        {
            
            brushTypeCombo.addActionListener (new ActionListener () {
            public void actionPerformed(ActionEvent e) {
                BrushTool.brushType = brushTypeCombo.getSelectedItem().toString();
            }
        });
            
            brushsize.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                JSpinner s = (JSpinner) e.getSource();
                BrushTool.brushSize = Float.parseFloat(s.getValue().toString());
            }
        });
            brushtool.put(index, true);
           
            int h=c.getHeight();
            int w=c.getWidth();
            
            BrushTool brush = new BrushTool();
            
            
            brush.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
            new ImageIcon("src/cursors/brush.png").getImage(),
            new Point(0,0),"custom cursor"));
            brush.setPreferredSize(new Dimension(w, h));
            c.setLayout(new java.awt.GridBagLayout());
            c.add(brush, new java.awt.GridBagConstraints());
        }
        
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_paintBrushBtnActionPerformed

    private void ColorPickerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColorPickerBtnActionPerformed
     
        
        int indexx=jTabbedPane1.getSelectedIndex();
        Component tempp= jTabbedPane1.getComponentAt(indexx);
        JScrollPane selectedd=(JScrollPane)tempp;
        JViewport mypanell =(JViewport)selectedd.getComponent(0);
        JPanel tt = (JPanel)mypanell.getComponent(0);
        DrawArea c =(DrawArea) tt.getComponent(0);
        
        
         int h=c.getHeight();
            int w=c.getWidth();
            
            ColorPickerTool color = new ColorPickerTool();
            //System.out.print("i");
            
           
            color.setPreferredSize(new Dimension(w, h));
            c.setLayout(new java.awt.GridBagLayout());
            c.add(color, new java.awt.GridBagConstraints());
    }//GEN-LAST:event_ColorPickerBtnActionPerformed

    private void paintBucketBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paintBucketBtnActionPerformed
        int index = jTabbedPane1.getSelectedIndex();
        if(index != -1)
        {
            Component temp= jTabbedPane1.getComponentAt(index);
            JScrollPane selected=(JScrollPane)temp;
            JViewport mypanel =(JViewport)selected.getComponent(0);
            JPanel t = (JPanel)mypanel.getComponent(0);
            DrawArea c =(DrawArea) t.getComponent(0);
            c.removeAll();
            selectedTabIndex = jTabbedPane1.getSelectedIndex();
            loadedImages.put(selectedTabIndex, c.getImage());
            
            CardLayout card = (CardLayout)toolsPanel.getLayout();
            card.show(toolsPanel, "buckettool");
            //index = jTabbedPane1.getSelectedIndex();
            
            if(index != -1)
            {
            
            int h=c.getHeight();
            int w=c.getWidth();
            
            PaintBucketTool bucket = new PaintBucketTool();

            bucket.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
            new ImageIcon("src/cursors/bucket.png").getImage(),
            new Point(0,0),"custom cursor"));
            bucket.setPreferredSize(new Dimension(w, h));
            
            c.setLayout(new java.awt.GridBagLayout());
            c.add(bucket, new java.awt.GridBagConstraints());
        }
        
        }
    }//GEN-LAST:event_paintBucketBtnActionPerformed

    private void eraserToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraserToolActionPerformed
        int index = jTabbedPane1.getSelectedIndex();
        if(index != -1)
        {
            Component temp= jTabbedPane1.getComponentAt(index);
            JScrollPane selected=(JScrollPane)temp;
            JViewport mypanel =(JViewport)selected.getComponent(0);
            JPanel t = (JPanel)mypanel.getComponent(0);
            DrawArea c =(DrawArea) t.getComponent(0);
            c.removeAll();
            selectedTabIndex = jTabbedPane1.getSelectedIndex();
            loadedImages.put(selectedTabIndex, c.getImage());
            
            CardLayout card = (CardLayout)toolsPanel.getLayout();
            card.show(toolsPanel, "erasertool");
            //index = jTabbedPane1.getSelectedIndex();
            boolean flag = false;
            if(erasertool.containsKey(index))
            {
                flag = erasertool.get(index);
            }

            if(index != -1 && !flag)
            {
            
            eraserSize.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                JSpinner s = (JSpinner) e.getSource();
                EraserTool.eraserSize = Float.parseFloat(s.getValue().toString());
            }
        });
            erasertool.put(index, true);
            
            int h=c.getHeight();
            int w=c.getWidth();
            
            EraserTool eraser = new EraserTool();
            
            
            eraser.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
            new ImageIcon("src/cursors/eraser.png").getImage(),
            new Point(0,0),"custom cursor"));
            eraser.setPreferredSize(new Dimension(w, h));
            
            c.setLayout(new java.awt.GridBagLayout());
            c.add(eraser, new java.awt.GridBagConstraints());
        }
        
        }
    }//GEN-LAST:event_eraserToolActionPerformed

    private void cropBtn4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropBtn4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cropBtn4ActionPerformed

    private void cropBtn5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropBtn5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cropBtn5ActionPerformed

    private void colorChooserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorChooserBtnActionPerformed
        ColorChooser color = new ColorChooser();
    }//GEN-LAST:event_colorChooserBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void socialBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_socialBtnActionPerformed
        if(!loadGallery)
        {
            try {
            BufferedImage img = ImageIO.read(new URL("https://i.ibb.co/cXMbXpL/new.jpg"));
            JPanel panel = new JPanel();
             DrawArea d=new DrawArea(120, 928) ;
             d.Drawer(img);
             panel.add(d);
             panel.setSize(200, 200);
             galleryFrame.add(panel);
              galleryFrame.add(panel);
               galleryFrame.add(panel);
                galleryFrame.add(panel); galleryFrame.add(panel);
                 galleryFrame.add(panel);
                  galleryFrame.add(panel); galleryFrame.add(panel);
                   galleryFrame.add(panel);
                  
                
                
             loadGallery = true;
        } catch (MalformedURLException ex) {
            Logger.getLogger(EditorMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(EditorMain.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        }
        if(!galleryFrame.isVisible())
                galleryFrame.setVisible(true);
            else
                galleryFrame.setVisible(false);
        
             
    }//GEN-LAST:event_socialBtnActionPerformed

    private void openImgBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openImgBtnActionPerformed
        
        JPanel panel = new JPanel();
        panel.setLayout(new java.awt.GridBagLayout());
        DrawArea drawArea=new DrawArea(120, 928) ;

        Image temp = ImageOpener.OpenImage();
        if(temp!=null)
        {
            drawArea.Drawer(temp);
            panel.add(drawArea, new java.awt.GridBagConstraints());
            JScrollPane j1=new JScrollPane(panel);
            String name="Untitled "+count;

            jTabbedPane1.addTab(name,j1);
            jTabbedPane1.setSelectedIndex(count - 1);

            count++;
        }
    }//GEN-LAST:event_openImgBtnActionPerformed
    
    
   
    private void newImgBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newImgBtnActionPerformed
       
        JPanel sizePanel = new javax.swing.JPanel();
        JLabel jLabel1 = new javax.swing.JLabel();
        JLabel jLabel2 = new javax.swing.JLabel();
        JTextField widthField = new javax.swing.JTextField();
        
        JTextField heightField = new javax.swing.JTextField();
       JLabel posLabel = new javax.swing.JLabel();
        JLabel jLabel4 = new javax.swing.JLabel();
        jLabel1.setText("Enter Image Dimensions:");

        jLabel2.setText("W:");
        jLabel4.setText("X");

        javax.swing.GroupLayout sizePanelLayout = new javax.swing.GroupLayout(sizePanel);
        sizePanel.setLayout(sizePanelLayout);
        sizePanelLayout.setHorizontalGroup(
            sizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sizePanelLayout.createSequentialGroup()
                .addGroup(sizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sizePanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel1))
                    .addGroup(sizePanelLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(widthField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(posLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(heightField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        sizePanelLayout.setVerticalGroup(
            sizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sizePanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(sizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(widthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(heightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(posLabel))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        
   
        baseHeight = 1000;
        baseWidth = 1000;
        JPanel panel = new JPanel();
        panel.setLayout(new GridBagLayout());
        
        DrawArea img = new DrawArea(baseWidth, baseHeight);
        
        panel.add(img);
        panel.setSize(baseWidth, baseHeight);
        panel.setPreferredSize(new Dimension(baseWidth, baseHeight));
        
        JScrollPane j1=new JScrollPane();
        j1.setViewportView(panel);
        j1.setSize(baseWidth, baseHeight);
        j1.setLocation(10, 10);
        
        j1.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        j1.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        String name="Untitled " + count;
        
        jTabbedPane1.addTab(name,j1);
        jTabbedPane1.setSelectedIndex(count - 1);
        jTabbedPane1.repaint();
        panel.repaint();
        repaint();
        count++;
       
    }//GEN-LAST:event_newImgBtnActionPerformed

  
    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private String getFileExtension(String name) 
    {
        int lastIndexOf = name.lastIndexOf(".");
        if (lastIndexOf == -1) {
            return ""; // empty extension
        }
        return name.substring(lastIndexOf + 1);
    }
    
    private void saveImgBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImgBtnActionPerformed
        Image save = getSelectedImage();
        if(save != null)
        {
            try 
            {
                BufferedImage bi = (BufferedImage) save;
                String path = ImageOpener.Path(true);
                String ext = getFileExtension(path);
               
                if(ext.equals("jpg") || ext.equals("png") || ext.equals("jpeg"))
                {
                    if(!path.isEmpty())
                    {
                        File outputfile = new File(path);
                        ImageIO.write(bi, "png", outputfile);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Invalid Image Format Provided!");
                }
            } catch (IOException e) {
                System.err.println("An Error Occured while saving the image!");
            }
        }
    }//GEN-LAST:event_saveImgBtnActionPerformed

    private void redoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_redoBtnActionPerformed

    private void openCameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCameraActionPerformed
        Camera cam = new Camera();
  
    }//GEN-LAST:event_openCameraActionPerformed
    JPanel getSelectedPanel()
    {
        int index = jTabbedPane1.getSelectedIndex();
        if(index != -1)
        {
            Component temp= jTabbedPane1.getComponentAt(index);
            JScrollPane selected=(JScrollPane)temp;
            JViewport mypanel =(JViewport)selected.getComponent(0);
            JPanel t = (JPanel)mypanel.getComponent(0);
            return t;
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No Image Selected");
        }
            return null;
    }
    private void bwBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bwBtnActionPerformed
       
            JPanel t = getSelectedPanel();
            DrawArea c =(DrawArea) t.getComponent(0);
            
            Image myColorImage = c.getImage();
            
            Image newimg = Filters.GrayScale.toBlackAndWhite((BufferedImage) myColorImage);
            
            t.removeAll();
            t.repaint();
            
            DrawArea n = new DrawArea(500, 500);
            n.Drawer(newimg);
            t.add(n, new java.awt.GridBagConstraints());

    }//GEN-LAST:event_bwBtnActionPerformed

    private void sepiaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sepiaBtnActionPerformed
            JPanel t = getSelectedPanel();
            DrawArea c =(DrawArea) t.getComponent(0);
            
            Image myColorImage = c.getImage();
            Image newimg = Filters.Sepia.toSepia((BufferedImage) myColorImage, 80);
            
            t.removeAll();
            t.repaint();

            DrawArea n = new DrawArea(500, 500);
            n.Drawer(newimg);
            t.add(n, new java.awt.GridBagConstraints());
        
    }//GEN-LAST:event_sepiaBtnActionPerformed

    private void medianBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medianBtnActionPerformed
            JPanel t = getSelectedPanel();
            DrawArea c =(DrawArea) t.getComponent(0);

            Image myColorImage = c.getImage();
            
            Image newimg = Filters.Median.toMedian(myColorImage);
            
            t.removeAll();
            t.repaint();

            DrawArea n = new DrawArea(500, 500);
            n.Drawer(newimg);
            t.add(n, new java.awt.GridBagConstraints());
        
    }//GEN-LAST:event_medianBtnActionPerformed

    private void uploadImgBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadImgBtnActionPerformed
        Image save = getSelectedImage();
        if(save != null)
        {
            try 
            {
                BufferedImage bi = (BufferedImage) save;
                String path = ImageOpener.Path(true);
                String ext = getFileExtension(path);
               
                if(ext.equals("jpg") || ext.equals("png") || ext.equals("jpeg"))
                {
                    if(!path.isEmpty())
                    {
                        File outputfile = new File(path);
                        ImageIO.write(bi, "png", outputfile);
                        SocialGallery.UploadImage.Upload(outputfile, ext);
                        
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Invalid Image Format Provided!");
                }
            } catch (IOException e) {
                System.err.println("An Error Occured while saving the image!");
            }
        }
    }//GEN-LAST:event_uploadImgBtnActionPerformed

    private void negativeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativeBtnActionPerformed
            JPanel t = getSelectedPanel();
            DrawArea c =(DrawArea) t.getComponent(0);
            
            Image myColorImage = c.getImage();
            
            Image newimg = Filters.Negative.toNegative(myColorImage);
            t.removeAll();
            t.repaint();

            DrawArea n = new DrawArea(500, 500);
            n.Drawer(newimg);
            t.add(n, new java.awt.GridBagConstraints());
    }//GEN-LAST:event_negativeBtnActionPerformed

    private void blueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueBtnActionPerformed
            JPanel t = getSelectedPanel();
            DrawArea c =(DrawArea) t.getComponent(0);
            
            Image myColorImage = c.getImage();

            Image newimg = Filters.BlueFilter.toBlue(myColorImage);
            t.removeAll();
            t.repaint();

            DrawArea n = new DrawArea(500, 500);
            n.Drawer(newimg);
            t.add(n, new java.awt.GridBagConstraints());
    }//GEN-LAST:event_blueBtnActionPerformed

    private void redBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redBtnActionPerformed
        JPanel t = getSelectedPanel();
            DrawArea c =(DrawArea) t.getComponent(0);
            
            Image myColorImage = c.getImage();
            
            Image newimg = Filters.RedFilter.toRed(myColorImage);
            t.removeAll();
            t.repaint();

            DrawArea n = new DrawArea(500, 500);
            n.Drawer(newimg);
            t.add(n, new java.awt.GridBagConstraints());
    }//GEN-LAST:event_redBtnActionPerformed

    private void greenBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenBtnActionPerformed
        JPanel t = getSelectedPanel();
            DrawArea c =(DrawArea) t.getComponent(0);
            
            Image myColorImage = c.getImage();

            Image newimg = Filters.GreenFilter.toGreen(myColorImage);
            t.removeAll();
            t.repaint();

            DrawArea n = new DrawArea(500, 500);
            n.Drawer(newimg);
            t.add(n, new java.awt.GridBagConstraints());
    }//GEN-LAST:event_greenBtnActionPerformed

    private void rotate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotate1ActionPerformed
        JPanel t = getSelectedPanel();
            DrawArea c =(DrawArea) t.getComponent(0);
            
            Image myColorImage = c.getImage();

            Image newimg = Tools.Rotate.Rotation(myColorImage, 90);
            t.removeAll();
            t.repaint();

            DrawArea n = new DrawArea(500, 500);
            n.Drawer(newimg);
            t.add(n, new java.awt.GridBagConstraints());
    }//GEN-LAST:event_rotate1ActionPerformed
   
   
     public BufferedImage rescale(BufferedImage originalImage)
    {
//       // orignalImage
//        BufferedImage resizedImage = new BufferedImage(baseWidth, baseHeight, BufferedImage.TYPE_INT_RGB);
//        Graphics2D g = resizedImage.createGraphics();
//        g.drawImage(originalImage, 0, 0, baseWidth, baseHeight, null);
//        g.dispose();
//        return resizedImage;
        return null;
    }
    void displayImage(String path, JLabel jLabel5)
    {
   
        baseWidth=jLabel5.getWidth();
        baseHeight=jLabel5.getHeight();
        
        
        
    }
    void settingStartImage() 
    {
          // jLabel5.setVisible(false);
           

        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditorMain().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ColorPickerBtn;
    private javax.swing.JPanel ConfigPanel;
    private javax.swing.JPanel EditorPanel;
    private javax.swing.JLabel SizeLbl;
    private javax.swing.JMenuItem blueBtn;
    public static javax.swing.JPanel bottomPanel;
    private javax.swing.JPanel brushToolPanel;
    private javax.swing.JComboBox<String> brushTypeCombo;
    private javax.swing.JSpinner brushsize;
    private javax.swing.JPanel bucketpanel;
    private javax.swing.JMenuItem bwBtn;
    private javax.swing.JButton colorChooserBtn;
    private javax.swing.JButton cropBtn;
    private javax.swing.JButton cropBtn4;
    private javax.swing.JButton cropBtn5;
    private javax.swing.JSpinner eraserSize;
    private javax.swing.JButton eraserTool;
    private javax.swing.JPanel eraserToolPanel;
    private javax.swing.JMenu filtersMenu;
    private javax.swing.JInternalFrame galleryFrame;
    private javax.swing.JMenuItem greenBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JSlider jSlider1;
    public static javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem medianBtn;
    private javax.swing.JMenuItem negativeBtn;
    private javax.swing.JMenuItem newImgBtn;
    private javax.swing.JMenuItem openCamera;
    private javax.swing.JMenuItem openImgBtn;
    private javax.swing.JButton paintBrushBtn;
    private javax.swing.JButton paintBucketBtn;
    private javax.swing.JMenuItem redBtn;
    private javax.swing.JMenuItem redoBtn;
    private javax.swing.JMenu rgbColors;
    private javax.swing.JMenuItem rotate1;
    private javax.swing.JMenuItem saveImgBtn;
    private javax.swing.JMenuItem sepiaBtn;
    private javax.swing.JButton socialBtn;
    private javax.swing.JPanel tipPanel;
    private javax.swing.JPanel toolsPanel;
    private javax.swing.JLabel typelbl;
    private javax.swing.JLabel typelbl1;
    private javax.swing.JMenuItem undoBtn;
    private javax.swing.JMenuItem uploadImgBtn;
    // End of variables declaration//GEN-END:variables

}
