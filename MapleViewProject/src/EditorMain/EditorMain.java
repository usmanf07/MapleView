/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package EditorMain;
import EditorMain.DrawRect;
import Membership.PurchaseForm;
import SocialGallery.GalleryImages;
import SocialGallery.UserImage;
import Tools.BrushTool;
import Tools.Camera;
import Tools.TextTool;
import Tools.ColorChooser;
import Tools.EraserTool;
import Tools.ShapeTool;
import Tools.PaintBucketTool;
import static Tools.ShapeTool.shapeStroke;
import UserVerification.User;
import static UserVerification.User.currentUser;
import com.github.sarxos.webcam.Webcam;
import java.awt.*;
import javax.swing.*;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.WritableRaster;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import static javax.swing.JFileChooser.APPROVE_OPTION;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import loginScreen.SignUpFrame;

/**
 *
 * @author usman
 */
public class EditorMain extends javax.swing.JFrame{

    /**
     * Creates new form EditorMain
     */
    public static int count = 1;
    public static int baseWidth;
    public static int baseHeight;
    public static HashMap<Integer, Image> OpenedImages;
    public static Image currentImage;
    public static HashMap<Integer, Image> loadedImages = new HashMap<Integer, Image>();
    public static int selectedTabIndex;
    HashMap<Integer, String> cardLayouts = new HashMap<Integer, String>();

    boolean loadGallery = false;
    DrawRect D1;
    boolean bluefilter = false;
    boolean redfilter = false;
    boolean greenfilter = false;

    public static Color primaryColor;
    public int lastImgValue = 0;
    private static boolean logoutflag = false;
    public EditorMain() 
    {
        
        initComponents();
        jSlider1.setMinorTickSpacing(5);  
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        CardLayout card = (CardLayout)toolsPanel.getLayout();
        card.show(toolsPanel, "card3");
        
        jTabbedPane1.addChangeListener(new ChangeListener() 
        {
        public void stateChanged(ChangeEvent e) 
        {
            //System.out.println("Tab: " + jTabbedPane1.getSelectedIndex());
            int index = jTabbedPane1.getSelectedIndex();
            String layoutName = cardLayouts.get(index);
            if(layoutName == null)
            {
                CardLayout card = (CardLayout)toolsPanel.getLayout();
                card.show(toolsPanel, "card3");
            }
                else{
            CardLayout card = (CardLayout)toolsPanel.getLayout();
            card.show(toolsPanel, layoutName);
            }
            selectedTabIndex = index;
            
        }
        
    });
        loadSocialGallery();
        primaryColor = Color.BLACK;
        if(currentUser.userType == 1)
            uploadImgBtn.setEnabled(false);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ConfigPanel = new javax.swing.JPanel();
        socialBtn = new javax.swing.JButton();
        toolsPanel = new javax.swing.JPanel();
        tipPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        brushToolPanel = new javax.swing.JPanel();
        typelbl = new javax.swing.JLabel();
        brushTypeCombo = new javax.swing.JComboBox<>();
        jSeparator4 = new javax.swing.JSeparator();
        typelbl1 = new javax.swing.JLabel();
        brushsize = new javax.swing.JSpinner();
        eraserToolPanel = new javax.swing.JPanel();
        eraserSize = new javax.swing.JSpinner();
        SizeLbl = new javax.swing.JLabel();
        bucketpanel = new javax.swing.JPanel();
        textpanel = new javax.swing.JPanel();
        textHelpLbl = new javax.swing.JLabel();
        shapepanel = new javax.swing.JPanel();
        shapeCombo = new javax.swing.JComboBox<>();
        fillCheck = new javax.swing.JRadioButton();
        strokeLbl = new javax.swing.JLabel();
        strokeCombo = new javax.swing.JComboBox<>();
        rotatepanel = new javax.swing.JPanel();
        angleLbl = new javax.swing.JLabel();
        rotateCombo = new javax.swing.JComboBox<>();
        imgadjpanel = new javax.swing.JPanel();
        settingCombo = new javax.swing.JComboBox<>();
        setValLbl = new javax.swing.JLabel();
        imgadjslider = new javax.swing.JSlider();
        membershipBtn = new javax.swing.JButton();
        EditorPanel = new javax.swing.JPanel();
        cropBtn = new javax.swing.JButton();
        paintBrushBtn = new javax.swing.JButton();
        paintBucketBtn = new javax.swing.JButton();
        TextBtn = new javax.swing.JButton();
        eraserTool = new javax.swing.JButton();
        shapeBtn = new javax.swing.JButton();
        colorChooserBtn = new javax.swing.JButton();
        rotateToolBtn = new javax.swing.JButton();
        imgEnhanceBtn = new javax.swing.JButton();
        bottomPanel = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newImgBtn = new javax.swing.JMenuItem();
        openImgBtn = new javax.swing.JMenuItem();
        openCamera = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        saveImgBtn = new javax.swing.JMenuItem();
        uploadImgBtn = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        printBtn = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        logoutBtn = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        undoBtn = new javax.swing.JMenuItem();
        redoBtn = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        filtersMenu = new javax.swing.JMenu();
        bwBtn = new javax.swing.JMenuItem();
        sepiaBtn = new javax.swing.JMenuItem();
        medianBtn = new javax.swing.JMenuItem();
        negativeBtn = new javax.swing.JMenuItem();
        mirrorBtn = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        rgbColors = new javax.swing.JMenu();
        blueBtn = new javax.swing.JMenuItem();
        redBtn = new javax.swing.JMenuItem();
        greenBtn = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        socialBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        socialBtn.setText("Social Gallery");
        socialBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                socialBtnActionPerformed(evt);
            }
        });

        toolsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        toolsPanel.setLayout(new java.awt.CardLayout());

        jLabel3.setText("Tip of The Day");

        javax.swing.GroupLayout tipPanelLayout = new javax.swing.GroupLayout(tipPanel);
        tipPanel.setLayout(tipPanelLayout);
        tipPanelLayout.setHorizontalGroup(
            tipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tipPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel3)
                .addContainerGap(392, Short.MAX_VALUE))
        );
        tipPanelLayout.setVerticalGroup(
            tipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tipPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel3)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        toolsPanel.add(tipPanel, "card3");

        typelbl.setText("Brush:");

        brushTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Normal", "Calligraphy" }));

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        typelbl1.setText("Size:");

        brushsize.setModel(new javax.swing.SpinnerNumberModel(10, 1, 350, 1));
        brushsize.setValue(10);

        javax.swing.GroupLayout brushToolPanelLayout = new javax.swing.GroupLayout(brushToolPanel);
        brushToolPanel.setLayout(brushToolPanelLayout);
        brushToolPanelLayout.setHorizontalGroup(
            brushToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(brushToolPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(typelbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(brushTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typelbl1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(brushsize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(268, Short.MAX_VALUE))
        );
        brushToolPanelLayout.setVerticalGroup(
            brushToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(brushToolPanelLayout.createSequentialGroup()
                .addGroup(brushToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, brushToolPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator4))
                    .addGroup(brushToolPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(brushToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(brushToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(typelbl)
                                .addComponent(brushTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(brushToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(typelbl1)
                                .addComponent(brushsize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        toolsPanel.add(brushToolPanel, "brushtool");

        eraserSize.setModel(new javax.swing.SpinnerNumberModel(10, 1, 350, 1));
        eraserSize.setValue(10);

        SizeLbl.setText("Size:");

        javax.swing.GroupLayout eraserToolPanelLayout = new javax.swing.GroupLayout(eraserToolPanel);
        eraserToolPanel.setLayout(eraserToolPanelLayout);
        eraserToolPanelLayout.setHorizontalGroup(
            eraserToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eraserToolPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(SizeLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eraserSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(380, Short.MAX_VALUE))
        );
        eraserToolPanelLayout.setVerticalGroup(
            eraserToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, eraserToolPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(eraserToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SizeLbl)
                    .addComponent(eraserSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11))
        );

        toolsPanel.add(eraserToolPanel, "erasertool");

        javax.swing.GroupLayout bucketpanelLayout = new javax.swing.GroupLayout(bucketpanel);
        bucketpanel.setLayout(bucketpanelLayout);
        bucketpanelLayout.setHorizontalGroup(
            bucketpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 501, Short.MAX_VALUE)
        );
        bucketpanelLayout.setVerticalGroup(
            bucketpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 46, Short.MAX_VALUE)
        );

        toolsPanel.add(bucketpanel, "buckettool");

        textHelpLbl.setText("Text Tool: Click Any Where on the Image to Add Text");

        javax.swing.GroupLayout textpanelLayout = new javax.swing.GroupLayout(textpanel);
        textpanel.setLayout(textpanelLayout);
        textpanelLayout.setHorizontalGroup(
            textpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(textpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textHelpLbl)
                .addContainerGap(217, Short.MAX_VALUE))
        );
        textpanelLayout.setVerticalGroup(
            textpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(textpanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(textHelpLbl)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        toolsPanel.add(textpanel, "textpanel");

        shapeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Rectangle", "Circle", "Line" }));

        fillCheck.setText("Fill");

        strokeLbl.setText("Stroke");

        strokeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0.5", "1", "1.5", "2", "2.5", "3", "3.5" }));

        javax.swing.GroupLayout shapepanelLayout = new javax.swing.GroupLayout(shapepanel);
        shapepanel.setLayout(shapepanelLayout);
        shapepanelLayout.setHorizontalGroup(
            shapepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shapepanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(shapeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fillCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(strokeLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(strokeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(242, Short.MAX_VALUE))
        );
        shapepanelLayout.setVerticalGroup(
            shapepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shapepanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(shapepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shapeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fillCheck)
                    .addComponent(strokeLbl)
                    .addComponent(strokeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        toolsPanel.add(shapepanel, "shapepanel");

        angleLbl.setText("Angle:");

        rotateCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "90", "-90", "180", "-180" }));
        rotateCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rotatepanelLayout = new javax.swing.GroupLayout(rotatepanel);
        rotatepanel.setLayout(rotatepanelLayout);
        rotatepanelLayout.setHorizontalGroup(
            rotatepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rotatepanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(angleLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rotateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(383, Short.MAX_VALUE))
        );
        rotatepanelLayout.setVerticalGroup(
            rotatepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rotatepanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rotatepanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(angleLbl)
                    .addComponent(rotateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        toolsPanel.add(rotatepanel, "rotatepanel");

        settingCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Brightness", "Reds", "Greens", "Blues" }));

        setValLbl.setText("Value:");

        imgadjslider.setMajorTickSpacing(1);
        imgadjslider.setMaximum(20);
        imgadjslider.setValue(10);
        imgadjslider.setMinorTickSpacing(1);
        imgadjslider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                imgadjsliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout imgadjpanelLayout = new javax.swing.GroupLayout(imgadjpanel);
        imgadjpanel.setLayout(imgadjpanelLayout);
        imgadjpanelLayout.setHorizontalGroup(
            imgadjpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imgadjpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(settingCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(setValLbl)
                .addGap(18, 18, 18)
                .addComponent(imgadjslider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(138, Short.MAX_VALUE))
        );
        imgadjpanelLayout.setVerticalGroup(
            imgadjpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imgadjpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(imgadjpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(settingCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setValLbl)
                    .addComponent(imgadjslider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        toolsPanel.add(imgadjpanel, "imgadjpanel");

        membershipBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        membershipBtn.setText("My Membership");
        membershipBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                membershipBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ConfigPanelLayout = new javax.swing.GroupLayout(ConfigPanel);
        ConfigPanel.setLayout(ConfigPanelLayout);
        ConfigPanelLayout.setHorizontalGroup(
            ConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(toolsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(socialBtn)
                    .addComponent(membershipBtn))
                .addGap(23, 23, 23))
        );
        ConfigPanelLayout.setVerticalGroup(
            ConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ConfigPanelLayout.createSequentialGroup()
                        .addComponent(socialBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(membershipBtn))
                    .addGroup(ConfigPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(toolsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        EditorPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(102, 102, 102)));

        cropBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-crop-25.png"))); // NOI18N
        cropBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropBtnActionPerformed(evt);
            }
        });

        paintBrushBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-paint-25.png"))); // NOI18N
        paintBrushBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paintBrushBtnActionPerformed(evt);
            }
        });

        paintBucketBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-fill-color-25.png"))); // NOI18N
        paintBucketBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paintBucketBtnActionPerformed(evt);
            }
        });

        TextBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-text-25.png"))); // NOI18N
        TextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextBtnActionPerformed(evt);
            }
        });

        eraserTool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-eraser-25.png"))); // NOI18N
        eraserTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraserToolActionPerformed(evt);
            }
        });

        shapeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-shape-25.png"))); // NOI18N
        shapeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shapeBtnActionPerformed(evt);
            }
        });

        colorChooserBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-paint-palette-25.png"))); // NOI18N
        colorChooserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorChooserBtnActionPerformed(evt);
            }
        });

        rotateToolBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-auto-rotate-based-on-text-25.png"))); // NOI18N
        rotateToolBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateToolBtnActionPerformed(evt);
            }
        });

        imgEnhanceBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-automatic-brightness-25.png"))); // NOI18N
        imgEnhanceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imgEnhanceBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout EditorPanelLayout = new javax.swing.GroupLayout(EditorPanel);
        EditorPanel.setLayout(EditorPanelLayout);
        EditorPanelLayout.setHorizontalGroup(
            EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EditorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EditorPanelLayout.createSequentialGroup()
                        .addGroup(EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(colorChooserBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shapeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(paintBucketBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eraserTool, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(paintBrushBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cropBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rotateToolBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EditorPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(imgEnhanceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        EditorPanelLayout.setVerticalGroup(
            EditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EditorPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(imgEnhanceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cropBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(paintBrushBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(eraserTool, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(paintBucketBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(TextBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(shapeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rotateToolBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(colorChooserBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        bottomPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(102, 102, 102)));

        jSlider1.setMajorTickSpacing(50);
        jSlider1.setMaximum(150);
        jSlider1.setMinimum(50);
        jSlider1.setMinorTickSpacing(10);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setSnapToTicks(true);
        jSlider1.setValue(100);
        jSlider1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                jSlider1AncestorRemoved(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                jSlider1AncestorMoved(evt);
            }
        });
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel4.setText("Zoom:");

        javax.swing.GroupLayout bottomPanelLayout = new javax.swing.GroupLayout(bottomPanel);
        bottomPanel.setLayout(bottomPanelLayout);
        bottomPanelLayout.setHorizontalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(117, 117, 117))
        );
        bottomPanelLayout.setVerticalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(102, 102, 102)));

        jPanel1.setVisible(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 284, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 598, Short.MAX_VALUE)
        );

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        newImgBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        newImgBtn.setText("New Image");
        newImgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newImgBtnActionPerformed(evt);
            }
        });
        jMenu1.add(newImgBtn);

        openImgBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openImgBtn.setText("Open Image");
        openImgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openImgBtnActionPerformed(evt);
            }
        });
        jMenu1.add(openImgBtn);

        openCamera.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openCamera.setText("Open Camera");
        openCamera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCameraActionPerformed(evt);
            }
        });
        jMenu1.add(openCamera);
        jMenu1.add(jSeparator1);

        saveImgBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveImgBtn.setText("Save");
        saveImgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImgBtnActionPerformed(evt);
            }
        });
        jMenu1.add(saveImgBtn);

        uploadImgBtn.setText("Upload To Social Gallery");
        uploadImgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadImgBtnActionPerformed(evt);
            }
        });
        jMenu1.add(uploadImgBtn);
        jMenu1.add(jSeparator2);

        printBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        printBtn.setText("Print");
        printBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBtnActionPerformed(evt);
            }
        });
        jMenu1.add(printBtn);
        jMenu1.add(jSeparator3);

        logoutBtn.setText("Logout");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });
        jMenu1.add(logoutBtn);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        undoBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        undoBtn.setText("Undo");
        undoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoBtnActionPerformed(evt);
            }
        });
        jMenu2.add(undoBtn);

        redoBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        redoBtn.setText("Redo");
        redoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoBtnActionPerformed(evt);
            }
        });
        jMenu2.add(redoBtn);
        jMenu2.add(jSeparator6);

        jMenuBar1.add(jMenu2);

        filtersMenu.setText("Filter Gallery");

        bwBtn.setText("Black & White");
        bwBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bwBtnActionPerformed(evt);
            }
        });
        filtersMenu.add(bwBtn);

        sepiaBtn.setText("Sepia");
        sepiaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sepiaBtnActionPerformed(evt);
            }
        });
        filtersMenu.add(sepiaBtn);

        medianBtn.setText("Median (Remove Noise)");
        medianBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medianBtnActionPerformed(evt);
            }
        });
        filtersMenu.add(medianBtn);

        negativeBtn.setText("Negative");
        negativeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negativeBtnActionPerformed(evt);
            }
        });
        filtersMenu.add(negativeBtn);

        mirrorBtn.setText("Mirrorize");
        mirrorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mirrorBtnActionPerformed(evt);
            }
        });
        filtersMenu.add(mirrorBtn);
        filtersMenu.add(jSeparator5);

        rgbColors.setText("RGB Colors");

        blueBtn.setText("Blue");
        blueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueBtnActionPerformed(evt);
            }
        });
        rgbColors.add(blueBtn);

        redBtn.setText("Red");
        redBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redBtnActionPerformed(evt);
            }
        });
        rgbColors.add(redBtn);

        greenBtn.setText("Green");
        greenBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenBtnActionPerformed(evt);
            }
        });
        rgbColors.add(greenBtn);

        filtersMenu.add(rgbColors);

        jMenuBar1.add(filtersMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ConfigPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(EditorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane1))
                    .addComponent(bottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ConfigPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EditorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTabbedPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cropBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropBtnActionPerformed
 
        int index=jTabbedPane1.getSelectedIndex();

        if(index!=-1)
        {
           Component temp= jTabbedPane1.getComponentAt(index);
           JScrollPane selected=(JScrollPane)temp;
           JViewport mypanel =(JViewport)selected.getComponent(0);
           JPanel t = (JPanel)mypanel.getComponent(0);
           DrawArea c =(DrawArea) t.getComponent(0);
           c.tool(10);
           if(!c.crop)
           {
                c.crop=true;
                if(c.isSaved)
                    c.isSaved = false;
                
                JPanel cropToolPanel = new JPanel();
                JButton cropImgBtn = new JButton();
                cropImgBtn.setText("Crop");

                javax.swing.GroupLayout cropToolPanelLayout = new javax.swing.GroupLayout(cropToolPanel);
                cropToolPanel.setLayout(cropToolPanelLayout);
                cropToolPanelLayout.setHorizontalGroup(
                    cropToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cropToolPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cropImgBtn)
                        .addContainerGap(660, Short.MAX_VALUE))
                );
                cropToolPanelLayout.setVerticalGroup(
                    cropToolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cropToolPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cropImgBtn)
                        .addContainerGap(18, Short.MAX_VALUE))
                );

        toolsPanel.add(cropToolPanel, "croptool");
        
        CardLayout card = (CardLayout)toolsPanel.getLayout();
        card.show(toolsPanel, "croptool");
       cardLayouts.put(selectedTabIndex, "croptool");
            int h=c.getHeight();
            int w=c.getWidth();
            
            Image tem=deepCopy((BufferedImage)c.getImage()); 
            c.undo.push(tem);
             
            c.removeAll();
            c.repaint();
           // System.out.print(h);
            DrawRect D1=new DrawRect();
            D1.setPreferredSize(new Dimension(w, h));
            c.setLayout(new java.awt.GridBagLayout());
            c.setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
            c.add(D1, new java.awt.GridBagConstraints());
            c.repaint();
            
            cropImgBtn.addActionListener(new java.awt.event.ActionListener() 
            {
                public void actionPerformed(java.awt.event.ActionEvent evt) 
                {
                    //currentImage=c.getImage();
                    selectedTabIndex = jTabbedPane1.getSelectedIndex();
                    loadedImages.put(selectedTabIndex, c.getImage());
             //       System.out.print(currentImage);
                    BufferedImage curr = (BufferedImage) c.getImage();
                    int width=D1.eX-D1.sX;
                    int height=D1.eY-D1.sY;
                    
                    if(width > 0 && height > 0)
                    {
                        BufferedImage img = curr.getSubimage(D1.sX, D1.sY, width, height);
                        c.Drawer(img);
                        c.setPreferredSize(new Dimension(width, height));
                        c.setSize(new Dimension(width, height));
                        c.repaint();
                        c.remove(D1);
                        c.repaint();

                        toolsPanel.remove(cropImgBtn);
                        toolsPanel.remove(cropToolPanel);
                        toolsPanel.repaint();
                        c.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                    }
                    else
                        JOptionPane.showMessageDialog(null, "Crop Area Outside Image Bounds!");
                }
 
            });
           }
        }
        
    }//GEN-LAST:event_cropBtnActionPerformed
    
    static BufferedImage deepCopy(BufferedImage bi) 
    {
        try{
        ColorModel cm = bi.getColorModel();
        boolean isAlphaPremultiplied = cm.isAlphaPremultiplied();
        WritableRaster raster = bi.copyData(bi.getRaster().createCompatibleWritableRaster());
        return new BufferedImage(cm, raster, isAlphaPremultiplied, null);
        }
        catch(Exception ex)
        {
            
        }
        try{
            BufferedImage b = new BufferedImage(bi.getWidth(), bi.getHeight(), bi.getType());
            Graphics g = b.getGraphics();
            g.drawImage(bi, 0, 0, null);
            g.dispose();
            return b;
            
        }
        catch(Exception ex){
            
            
            
        }
        
        return null;
    }
    public Image getSelectedImage()
    {
        selectedTabIndex = jTabbedPane1.getSelectedIndex();
        if(selectedTabIndex != -1)
        {
            Component temp= jTabbedPane1.getComponentAt(selectedTabIndex);
            JScrollPane selected=(JScrollPane)temp;
            JViewport mypanel =(JViewport)selected.getComponent(0);
            JPanel t = (JPanel)mypanel.getComponent(0);
            DrawArea c =(DrawArea) t.getComponent(0);
            return c.image; 
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No Images are available!");
        }
        return null;
    }
    private void paintBrushBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paintBrushBtnActionPerformed
        int index = jTabbedPane1.getSelectedIndex();
        if(index != -1){
            Component temp= jTabbedPane1.getComponentAt(index);
            JScrollPane selected=(JScrollPane)temp;
            JViewport mypanel =(JViewport)selected.getComponent(0);
            JPanel t = (JPanel)mypanel.getComponent(0);
            DrawArea c =(DrawArea) t.getComponent(0);
            c.tool(2);
            if(!c.Brush && index != -1)
            {
                c.Brush=true;
                if(c.isSaved)
                    c.isSaved = false;
            Image tem=deepCopy((BufferedImage)c.getImage()); 
             c.undo.push(tem);
        c.removeAll();
        selectedTabIndex = jTabbedPane1.getSelectedIndex();
        
        loadedImages.put(selectedTabIndex, c.getImage());
        CardLayout card = (CardLayout)toolsPanel.getLayout();
        card.show(toolsPanel, "brushtool");
        
        cardLayouts.put(selectedTabIndex, "brushtool");
        
            brushTypeCombo.addActionListener (new ActionListener () {
            public void actionPerformed(ActionEvent e) {
                BrushTool.brushType = brushTypeCombo.getSelectedItem().toString();
            }
        });
            
            brushsize.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                JSpinner s = (JSpinner) e.getSource();
                BrushTool.brushSize = Float.parseFloat(s.getValue().toString());
            }
        });
          //  brushtool.put(index, true);
           
            int h=c.getHeight();
            int w=c.getWidth();
            
            BrushTool brush = new BrushTool();
            
            
            brush.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
            new ImageIcon("src/cursors/brush.png").getImage(),
            new Point(0,0),"custom cursor"));
            brush.setPreferredSize(new Dimension(w, h));
            c.setLayout(new java.awt.GridBagLayout());
            c.add(brush, new java.awt.GridBagConstraints());
        }
        
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_paintBrushBtnActionPerformed

    private void TextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextBtnActionPerformed
        int index = jTabbedPane1.getSelectedIndex();
        if(index != -1)
        {
                Component temp= jTabbedPane1.getComponentAt(index);
                JScrollPane selected=(JScrollPane)temp;
                JViewport mypanel =(JViewport)selected.getComponent(0);
                JPanel t = (JPanel)mypanel.getComponent(0);
                DrawArea c =(DrawArea) t.getComponent(0);
                c.tool(5);
                if(!c.text && index != -1)
                {
                    c.text = true;
                    if(c.isSaved)
                        c.isSaved = false;
                Image tem = deepCopy((BufferedImage)c.getImage()); 
                 c.undo.push(tem);
                 
                c.removeAll();
                selectedTabIndex = jTabbedPane1.getSelectedIndex();

                loadedImages.put(selectedTabIndex, c.getImage());
                CardLayout card = (CardLayout)toolsPanel.getLayout();
                card.show(toolsPanel, "textpanel");
                cardLayouts.put(selectedTabIndex, "textpanel");

                int h = c.getHeight();
                int w = c.getWidth();

                TextTool text = new TextTool();
                

                text.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                new ImageIcon("src/cursors/text.png").getImage(),
                new Point(0,0),"custom cursor"));
                text.setPreferredSize(new Dimension(w, h));
               
                c.setLayout(new java.awt.GridBagLayout());
                c.add(text, new java.awt.GridBagConstraints());
               
            }
        
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No Images Opened");
        }
    }//GEN-LAST:event_TextBtnActionPerformed

    private void paintBucketBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paintBucketBtnActionPerformed
        int index = jTabbedPane1.getSelectedIndex();
        if(index != -1)
        {
            Component temp= jTabbedPane1.getComponentAt(index);
            JScrollPane selected=(JScrollPane)temp;
            JViewport mypanel =(JViewport)selected.getComponent(0);
            JPanel t = (JPanel)mypanel.getComponent(0);
            DrawArea c =(DrawArea) t.getComponent(0);
            c.tool(4);
            if(!c.paintbucket){
                if(c.isSaved)
                    c.isSaved = false;
            c.paintbucket=true;
            Image tem=deepCopy((BufferedImage)c.getImage()); 
            c.undo.push(tem);
            
            c.removeAll();
            selectedTabIndex = jTabbedPane1.getSelectedIndex();
            loadedImages.put(selectedTabIndex, c.getImage());
            
            CardLayout card = (CardLayout)toolsPanel.getLayout();
            card.show(toolsPanel, "buckettool");
             cardLayouts.put(selectedTabIndex, "buckettool");
            //index = jTabbedPane1.getSelectedIndex();
            
            if(index != -1)
            {
            
            int h=c.getHeight();
            int w=c.getWidth();
            
            PaintBucketTool bucket = new PaintBucketTool();

            bucket.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
            new ImageIcon("src/cursors/bucket.png").getImage(),
            new Point(0,0),"custom cursor"));
            bucket.setPreferredSize(new Dimension(w, h));
            
            c.setLayout(new java.awt.GridBagLayout());
            c.add(bucket, new java.awt.GridBagConstraints());
        }
        
        }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No Images Opened");
        }
    }//GEN-LAST:event_paintBucketBtnActionPerformed

    private void eraserToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraserToolActionPerformed
        int index = jTabbedPane1.getSelectedIndex();
        if(index != -1)
        {
            Component temp= jTabbedPane1.getComponentAt(index);
            JScrollPane selected=(JScrollPane)temp;
            JViewport mypanel =(JViewport)selected.getComponent(0);
            JPanel t = (JPanel)mypanel.getComponent(0);
            DrawArea c =(DrawArea) t.getComponent(0);
            c.tool(3);
            if(!c.eraser)
            {
                c.eraser=true;
                if(c.isSaved)
                    c.isSaved = false;
            Image tem=deepCopy((BufferedImage)c.getImage()); 
            c.undo.push(tem);
             
            c.removeAll();
            selectedTabIndex = jTabbedPane1.getSelectedIndex();
            loadedImages.put(selectedTabIndex, c.getImage());
            
            CardLayout card = (CardLayout)toolsPanel.getLayout();
            card.show(toolsPanel, "erasertool");
            cardLayouts.put(selectedTabIndex, "erasertool");
            //index = jTabbedPane1.getSelectedIndex();
           

            if(index != -1)
            {
            
            eraserSize.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                JSpinner s = (JSpinner) e.getSource();
                EraserTool.eraserSize = Float.parseFloat(s.getValue().toString());
            }
        });
            //erasertool.put(index, true);
            
            int h=c.getHeight();
            int w=c.getWidth();
            
            EraserTool eraser = new EraserTool();
            
            
            eraser.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
            new ImageIcon("src/cursors/eraser.png").getImage(),
            new Point(0,0),"custom cursor"));
            eraser.setPreferredSize(new Dimension(w, h));
            
            c.setLayout(new java.awt.GridBagLayout());
            c.add(eraser, new java.awt.GridBagConstraints());
        }
        
        }}
        else
        {
            JOptionPane.showMessageDialog(null, "No Images Opened");
        }
    }//GEN-LAST:event_eraserToolActionPerformed

    private void shapeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shapeBtnActionPerformed
        int index = jTabbedPane1.getSelectedIndex();
        if(index != -1)
        {
            Component temp= jTabbedPane1.getComponentAt(index);
            JScrollPane selected=(JScrollPane)temp;
            JViewport mypanel =(JViewport)selected.getComponent(0);
            JPanel t = (JPanel)mypanel.getComponent(0);
            DrawArea c =(DrawArea) t.getComponent(0);
            c.tool(6);
            if(!c.shape && index != -1)
            {
                c.shape = true;
                if(c.isSaved)
                    c.isSaved = false;
                Image tem = deepCopy((BufferedImage)c.getImage()); 
                 c.undo.push(tem);

                c.removeAll();
                selectedTabIndex = jTabbedPane1.getSelectedIndex();

                loadedImages.put(selectedTabIndex, c.getImage());
                CardLayout card = (CardLayout)toolsPanel.getLayout();
                card.show(toolsPanel, "shapepanel");
                cardLayouts.put(selectedTabIndex, "shapepanel");
                        shapeCombo.addActionListener (new ActionListener () {
                    public void actionPerformed(ActionEvent e) 
                    {
                        String sel_shape = shapeCombo.getSelectedItem().toString();
                        if(sel_shape.equals("Rectangle"))
                            ShapeTool.shapetype = 1;
                        if(sel_shape.equals("Circle"))
                            ShapeTool.shapetype = 2;
                        if(sel_shape.equals("Line"))
                            ShapeTool.shapetype = 3;
                    }
                });
                        
                        strokeCombo.addActionListener (new ActionListener () 
                        {
                    public void actionPerformed(ActionEvent e) 
                    {
                        String temp = strokeCombo.getSelectedItem().toString();
                        float value = Float.parseFloat(temp);
                        BasicStroke s = new BasicStroke((float) value);
                        shapeStroke = s;
                    }
                });

                    fillCheck.addChangeListener(new ChangeListener() {

                    @Override
                    public void stateChanged(ChangeEvent e) 
                    {
                        if(fillCheck.isSelected())
                            ShapeTool.isFill = true;
                        else
                            ShapeTool.isFill = false;
                    }
                });
            
                int h = c.getHeight();
                int w = c.getWidth();

                ShapeTool s = new ShapeTool();

                s.setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
                s.setPreferredSize(new Dimension(w, h));

                c.setLayout(new java.awt.GridBagLayout());
                c.add(s, new java.awt.GridBagConstraints());
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No Images Opened");
        }
    }//GEN-LAST:event_shapeBtnActionPerformed

    private void zoomBtnActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        Image temp=getSelectedImage();
         if(temp==null)
         {
             return;
         }
         
          JPanel t = getSelectedPanel();
          if(t==null)
          {
              return;
          }
          DrawArea c =(DrawArea) t.getComponent(0);
         int width=temp.getWidth(null);
         int height=temp.getHeight(null);
         
         int percent=jSlider1.getValue();
         width=(width/percent)*100;
         height=(height/percent)*100;
              
         c.removeAll();
         
         c.zoom(width, height);
         c.repaint();
         repaint();
    }                                        

    private void colorChooserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorChooserBtnActionPerformed
        ColorChooser color = new ColorChooser();
    }//GEN-LAST:event_colorChooserBtnActionPerformed

    
    public static Dimension getScaledDimension(Dimension imgSize, Dimension boundary) 
    {
        int original_width = imgSize.width;
        int original_height = imgSize.height;
        int bound_width = boundary.width;
        int bound_height = boundary.height;
        int new_width = original_width;
        int new_height = original_height;

        // first check if we need to scale width
        if (original_width > bound_width) 
        {
            //scale width to fit
            new_width = bound_width;
            //scale height to maintain aspect ratio
            new_height = (new_width * original_height) / original_width;
        }

        // then check if we need to scale even with the new height
        if (new_height > bound_height) {
            //scale height to fit instead
            new_height = bound_height;
            //scale width to maintain aspect ratio
            new_width = (new_height * original_width) / original_height;
        }

        return new Dimension(new_width, new_height);
    }
    
    public void loadSocialGallery()
    {
        jPanel1.removeAll();
        try {
            
            JPanel panel = new JPanel(new GridLayout(0, 1));

            JScrollPane mypane=new JScrollPane(panel);
            mypane.setSize(280,800);
            mypane.setVisible(true);
            Dimension boundary = new Dimension(500, 500); 
            
            GalleryImages.loadImagesFromDB();
            for(int i=0;i < GalleryImages.imageList.size();i++)
            {
               
                
                UserImage ui = GalleryImages.imageList.get(i);
                JLabel post = new JLabel(ui.uploaderName);
                post.setFont(new Font("Montserrat", Font.BOLD, 20));
                BufferedImage img = ImageIO.read(new URL(ui.url));
                Dimension oldImgDim = new Dimension(img.getWidth(null), img.getHeight(null)); 
                Dimension newDim = getScaledDimension(oldImgDim, boundary);
                Image dimg = img.getScaledInstance(newDim.width, newDim.width,
                Image.SCALE_SMOOTH);
   
                post.setIcon(new ImageIcon(dimg));
  
                post.setVerticalTextPosition(SwingConstants.TOP);
                post.setHorizontalTextPosition(SwingConstants.CENTER);
                
                panel.add(post);
            }
            
        //    panel.setSize(300, 200);
            panel.setVisible(true);
           
            
            
            jPanel1.add(mypane);
      // System.out.print(jPanel1.getHeight()+" "+jPanel1.getWidth());
                
             loadGallery = true;
        } catch (MalformedURLException ex) {
            System.out.print(ex);
            Logger.getLogger(EditorMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
             System.out.print(ex);
            Logger.getLogger(EditorMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void socialBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_socialBtnActionPerformed

        if(jPanel1.isVisible())
        {
            jPanel1.setVisible(false);
        }
        else
        {
            jPanel1.setVisible(true);
        }
             
    }//GEN-LAST:event_socialBtnActionPerformed

    private void openImgBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openImgBtnActionPerformed
        
        JPanel panel = new JPanel();
        panel.setLayout(new java.awt.GridBagLayout());
        DrawArea drawArea=new DrawArea(120, 928) ;

        Image temp = ImageOpener.OpenImage();
        if(temp!=null)
        {
            drawArea.Drawer(temp);
            panel.add(drawArea, new java.awt.GridBagConstraints());
            JScrollPane j1=new JScrollPane(panel);
            String name="Untitled "+count;

            jTabbedPane1.addTab(name,j1);
            jTabbedPane1.setTabComponentAt(count - 1, getTitlePanel(name));
            jTabbedPane1.setSelectedIndex(count - 1);

            count++;
        }
    }//GEN-LAST:event_openImgBtnActionPerformed
    
    
   
    private void newImgBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newImgBtnActionPerformed
       
        JPanel sizePanel = new javax.swing.JPanel();
        JLabel jLabel1 = new javax.swing.JLabel();
        JLabel jLabel2 = new javax.swing.JLabel();
        JTextField widthField = new javax.swing.JTextField();
        
        JTextField heightField = new javax.swing.JTextField();
        JLabel posLabel = new javax.swing.JLabel();
        JLabel jLabel4 = new javax.swing.JLabel();
        jLabel1.setText("Enter Image Dimensions:");

        jLabel2.setText("W:");
        jLabel4.setText("X");
        
        
        javax.swing.GroupLayout sizePanelLayout = new javax.swing.GroupLayout(sizePanel);
        sizePanel.setLayout(sizePanelLayout);
        sizePanelLayout.setHorizontalGroup(
            sizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sizePanelLayout.createSequentialGroup()
                .addGroup(sizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sizePanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel1))
                    .addGroup(sizePanelLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(widthField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(posLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(heightField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        sizePanelLayout.setVerticalGroup(
            sizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sizePanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(sizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(widthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(heightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(posLabel))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        
          /*int in = JOptionPane.showConfirmDialog(null, sizePanel, "Image Dimensions",
                        JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.PLAIN_MESSAGE);*/
        
       // if(in == 0 && !widthField.getText().isEmpty() && !heightField.getText().isEmpty())
        //{
            //String width = widthField.getText();
            //String height = heightField.getText();
            String width = "500";
            String height = "500";
            if(Integer.parseInt(width) > 0 && Integer.parseInt(height) > 0)
            {
                baseHeight = Integer.parseInt(height);
                baseWidth = Integer.parseInt(width);
            }
                
            else
            {
                baseHeight = 1000;
                baseWidth = 1000;
            }
                
            JPanel panel = new JPanel();
            panel.setLayout(new GridBagLayout());

            DrawArea img = new DrawArea(baseWidth, baseHeight);

            panel.add(img);
            panel.setSize(baseWidth, baseHeight);
         //   panel.setPreferredSize(new Dimension(baseWidth, baseHeight));

            JScrollPane j1=new JScrollPane();
            j1.setViewportView(panel);
            j1.setSize(baseWidth, baseHeight);
            j1.setLocation(10, 10);

            j1.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            j1.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
            String name="Untitled " + count;
            jTabbedPane1.addTab(name,j1);
            jTabbedPane1.setTabComponentAt(count - 1, getTitlePanel(name));
            
            jTabbedPane1.setSelectedIndex(count - 1);
            jTabbedPane1.repaint();
            panel.repaint();
            repaint();
            count++;

        //}
        
//        else
//        {
//            JOptionPane.showMessageDialog(null, "Invalid Dimensions Entered! Try Again");
//        }

    }//GEN-LAST:event_newImgBtnActionPerformed
    
    public static JPanel getTitlePanel(String title)
    {
            JPanel titlePanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
            titlePanel.setOpaque(false);
            JLabel titleLbl = new JLabel(title);
            titleLbl.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 5));
            titlePanel.add(titleLbl);
            JButton closeButton = new JButton("x");
            
            closeButton.addMouseListener(new MouseAdapter()
            {
             @Override
             public void mouseClicked(MouseEvent e)
             {
                int index = jTabbedPane1.getSelectedIndex();
                
                closeTabValidate(index);
             }
            });
            titlePanel.add(closeButton);

            return titlePanel;
    }
  
    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed
    
    private static boolean closeTabValidate(int index)
    {
        System.out.println(index);
        if(index != -1)
        {
                    Component temp= jTabbedPane1.getComponentAt(index);
                    if(temp != null)
                    {
                    JScrollPane selected=(JScrollPane)temp;
                    JViewport mypanel =(JViewport)selected.getComponent(0);
                    JPanel t = (JPanel)mypanel.getComponent(0);
                    DrawArea c =(DrawArea) t.getComponent(0);
                    
                    if(!c.isSaved)
                    {
                        int n = JOptionPane.showConfirmDialog(null, "Do you want to save this image before closing?");
                        if (n == JOptionPane.YES_OPTION) 
                        {
                            saveImgBtn.doClick();
                            if(c.isSaved)
                            {
                                JOptionPane.showMessageDialog(null, "Image Saved!");
                                c.removeAll();
                                t.removeAll();
                                mypanel.removeAll();
                                selected.removeAll();
                                logoutflag = false;
                                jTabbedPane1.remove(index);
                                count--;
                                return true;
                            }
                        }
                        else if(n == JOptionPane.NO_OPTION)
                        {
                            c.removeAll();
                            t.removeAll();
                            mypanel.removeAll();
                            selected.removeAll();
                            logoutflag = false;
                            jTabbedPane1.remove(index);
                            count--;
                            return true;
                        }
                        
                    }
                    else
                    {
                        c.removeAll();
                        t.removeAll();
                        mypanel.removeAll();
                        selected.removeAll();
                        logoutflag = false;
                        jTabbedPane1.remove(index);
                        count--;
                       return true;
                    }
                    }
                }
                return false;
        
    }
    private String getFileExtension(String name) 
    {
        int lastIndexOf = name.lastIndexOf(".");
        if (lastIndexOf == -1) {
            return ""; // empty extension
        }
        return name.substring(lastIndexOf + 1);
    }
    
    private void saveImgBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImgBtnActionPerformed
        
        selectedTabIndex = jTabbedPane1.getSelectedIndex();
        if(selectedTabIndex != -1)
        {
            Component temp= jTabbedPane1.getComponentAt(selectedTabIndex);
            JScrollPane selected=(JScrollPane)temp;
            JViewport mypanel =(JViewport)selected.getComponent(0);
            JPanel t = (JPanel)mypanel.getComponent(0);
            DrawArea c =(DrawArea) t.getComponent(0);
            Image save = c.getImage();
            if(save != null)
            {
                try 
                {
                    BufferedImage bi = (BufferedImage) save;
                    String path = ImageOpener.Path(true);
                    String ext = getFileExtension(path);

                    if(ext.equals("jpg") || ext.equals("png") || ext.equals("jpeg"))
                    {
                        if(!path.isEmpty())
                        {
                            File outputfile = new File(path);
                            ImageIO.write(bi, "png", outputfile);
                            c.isSaved = true;
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Invalid Image Format Provided!");
                    }
                } catch (IOException e) {
                    //System.err.println("An Error Occured while saving the image!");
                }
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No Images are available!");
        }
        
    }//GEN-LAST:event_saveImgBtnActionPerformed

    private void redoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoBtnActionPerformed
            JPanel t = getSelectedPanel();
            DrawArea c =(DrawArea) t.getComponent(0);
            c.tool(0);
            c.removeAll();
            if(c.isSaved)
                c.isSaved = false;
            if(!c.redo.empty())
            {
                
                Image teme=deepCopy((BufferedImage)c.getImage()); 
                c.undo.push(teme);
                Image tem=c.redo.pop();
              //  System.out.print(tem);
                c.Drawer(tem);
                c.repaint();
                repaint();
            }
    }//GEN-LAST:event_redoBtnActionPerformed

    private void openCameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCameraActionPerformed
        Camera cam = new Camera();
        cam.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_openCameraActionPerformed
    static JPanel getSelectedPanel()
    {
        int index = jTabbedPane1.getSelectedIndex();
        if(index != -1)
        {
            Component temp= jTabbedPane1.getComponentAt(index);
            JScrollPane selected=(JScrollPane)temp;
            JViewport mypanel =(JViewport)selected.getComponent(0);
            JPanel t = (JPanel)mypanel.getComponent(0);
            return t;
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No Image Selected");
        }
            return null;
    }
    private void bwBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bwBtnActionPerformed
       
            JPanel t = getSelectedPanel();
            DrawArea c =(DrawArea) t.getComponent(0);
            if(c.isSaved)
                    c.isSaved = false;
            Image myColorImage = c.getImage();
            
            Image tem=deepCopy((BufferedImage)c.getImage()); 
            c.undo.push(tem);
            
            Image newimg = Filters.GrayScale.toBlackAndWhite((BufferedImage) myColorImage);
            c.tool(0);
            c.removeAll();
            c.Drawer(newimg);
            
            repaint();

    }//GEN-LAST:event_bwBtnActionPerformed

    private void sepiaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sepiaBtnActionPerformed
            JPanel t = getSelectedPanel();
            DrawArea c =(DrawArea) t.getComponent(0);
            if(c.isSaved)
                    c.isSaved = false;
            Image myColorImage = c.getImage();
            
            Image tem=deepCopy((BufferedImage)c.getImage()); 
            c.undo.push(tem);
            
            Image newimg = Filters.Sepia.toSepia((BufferedImage) myColorImage, 80);
            c.tool(0);
            c.removeAll();
            c.Drawer(newimg);
            repaint();
    }//GEN-LAST:event_sepiaBtnActionPerformed

    private void medianBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medianBtnActionPerformed
            JPanel t = getSelectedPanel();
            DrawArea c =(DrawArea) t.getComponent(0);
            if(c.isSaved)
                    c.isSaved = false;
            Image myColorImage = c.getImage();
            
            Image tem=deepCopy((BufferedImage)c.getImage()); 
            c.undo.push(tem);
            
            Image newimg = Filters.Median.toMedian(myColorImage);
            c.tool(0);
            c.removeAll();
            c.Drawer(newimg);
            repaint();
    }//GEN-LAST:event_medianBtnActionPerformed

    private void uploadImgBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadImgBtnActionPerformed
        Image save = getSelectedImage();
        if(save != null)
        {
            try 
            {
                BufferedImage bi = (BufferedImage) save;
                String path = ImageOpener.Path(true);
                String ext = getFileExtension(path);
               
                if(ext.equals("jpg") || ext.equals("png") || ext.equals("jpeg"))
                {
                    if(!path.isEmpty())
                    {
                        File outputfile = new File(path);
                        ImageIO.write(bi, "png", outputfile);
                        String name = "img." + ext;
                        SocialGallery.UploadImage.Upload(outputfile, name);
                        loadSocialGallery();
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Invalid Image Format Provided!");
                }
            } catch (IOException e) {
                System.err.println("An Error Occured while saving the image!");
            }
        }
    }//GEN-LAST:event_uploadImgBtnActionPerformed

    private void negativeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativeBtnActionPerformed
            JPanel t = getSelectedPanel();
            DrawArea c =(DrawArea) t.getComponent(0);
            if(c.isSaved)
                    c.isSaved = false;
            Image myColorImage = c.getImage();
            
            Image tem=deepCopy((BufferedImage)c.getImage()); 
            c.undo.push(tem);
            c.tool(0);
            Image newimg = Filters.Negative.toNegative(myColorImage);
            c.removeAll();
            c.Drawer(newimg);
            repaint();
    }//GEN-LAST:event_negativeBtnActionPerformed

    private void blueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueBtnActionPerformed
             if(redfilter || greenfilter)
                undoBtn.doClick();
            bluefilter = true;
            JPanel t = getSelectedPanel();
            DrawArea c =(DrawArea) t.getComponent(0);
            if(c.isSaved)
                    c.isSaved = false;
            Image myColorImage = c.getImage();
            c.tool(0);
            Image tem=deepCopy((BufferedImage)c.getImage()); 
            c.undo.push(tem);
            
            Image newimg = Filters.BlueFilter.toBlue(myColorImage);
            
            c.removeAll();
            c.Drawer(newimg);
            repaint();
    }//GEN-LAST:event_blueBtnActionPerformed

    private void redBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redBtnActionPerformed
            if(bluefilter || greenfilter)
                undoBtn.doClick();
            redfilter = true;
            JPanel t = getSelectedPanel();
            DrawArea c =(DrawArea) t.getComponent(0);
            if(c.isSaved)
                    c.isSaved = false;
            Image myColorImage = c.getImage();
            c.tool(0);
            Image newimg = Filters.RedFilter.toRed(myColorImage);
            Image tem=deepCopy((BufferedImage)c.getImage()); 
            c.undo.push(tem);
            
            c.removeAll();
            c.Drawer(newimg);
            repaint();
    }//GEN-LAST:event_redBtnActionPerformed

    private void greenBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenBtnActionPerformed
        if(redfilter || bluefilter)
                undoBtn.doClick();
            greenfilter = true;
            JPanel t = getSelectedPanel();
            DrawArea c =(DrawArea) t.getComponent(0);
            if(c.isSaved)
                    c.isSaved = false;
            c.tool(0);
            Image myColorImage = c.getImage();
            
            Image tem=deepCopy((BufferedImage)c.getImage()); 
            c.undo.push(tem);
            
            Image newimg = Filters.GreenFilter.toGreen(myColorImage);
            
           
            
            c.removeAll();
            c.Drawer(newimg);
            repaint();
    }//GEN-LAST:event_greenBtnActionPerformed

    private void undoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoBtnActionPerformed
        JPanel t = getSelectedPanel();
            DrawArea c =(DrawArea) t.getComponent(0);
            c.removeAll();
            c.tool(0);
            if(c.isSaved)
                    c.isSaved = false;
            if(!c.undo.empty())
            {
                Image teme=deepCopy((BufferedImage)c.getImage()); 
                c.redo.push(teme);
                Image tem=c.undo.pop();
                
               // System.out.print(tem);
                c.Drawer(tem);
                c.repaint();
                repaint();
            }
    }//GEN-LAST:event_undoBtnActionPerformed

    private void membershipBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_membershipBtnActionPerformed
        
        if(UserVerification.User.currentUser.userType == 1)
        {
            PurchaseForm pf = new PurchaseForm();
            pf.setVisible(true);
            pf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "You are already a premium member :)");
        }
    }//GEN-LAST:event_membershipBtnActionPerformed

    private void jSlider1AncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jSlider1AncestorMoved
        


        // TODO add your handling code here:
    }//GEN-LAST:event_jSlider1AncestorMoved

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
   
         
         
         Image temp=getSelectedImage();
         if(temp==null)
         {
             return;
         }
         
          JPanel t = getSelectedPanel();
          if(t==null)
          {
              return;
          }
          DrawArea c =(DrawArea) t.getComponent(0);
          c.removeAll();
         
          if(c.zoom==0)
          {
          c.w=temp.getWidth(null);
          c.h=temp.getHeight(null);
          }
          else
          {
              c.w=c.zoomImage.getWidth(null);
              c.h=c.zoomImage.getHeight(null);
              if(c.isSaved)
                    c.isSaved = false;
          }
          
         
          
          int width;
          int height;
          if(c.w!=0 && c.h!=0)
          {
          width=c.w;
          height=c.h;
          }
          else
          {
              width=temp.getWidth(null);
              height=temp.getHeight(null);
              
          }
          
         int percent=jSlider1.getValue();
         width=(width*percent)/100;
         height=(height*percent)/100;
   
         
         
         c.zoom(width, height);
         c.repaint();
         repaint();
         
         
        // TODO add your handling code here:
    }//GEN-LAST:event_jSlider1StateChanged

    private void jSlider1AncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jSlider1AncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_jSlider1AncestorRemoved

    private void mirrorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mirrorBtnActionPerformed
        JPanel t = getSelectedPanel();
        DrawArea c =(DrawArea) t.getComponent(0);

        Image myColorImage = c.getImage();
        if(c.isSaved)
                    c.isSaved = false;
        Image tem = deepCopy((BufferedImage)c.getImage()); 
        c.undo.push(tem);
        
        Image newimg = Filters.Mirrorize.toMirror((BufferedImage) myColorImage);
        c.tool(0);
        c.removeAll();
        c.Drawer(newimg);
        repaint();
    }//GEN-LAST:event_mirrorBtnActionPerformed

    private void rotateToolBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateToolBtnActionPerformed
            JPanel t = getSelectedPanel();
            DrawArea c =(DrawArea) t.getComponent(0);
            int index = jTabbedPane1.getSelectedIndex();
            c.tool(7);
            if(!c.rotate && index != -1)
            {
                c.rotate = true;
                if(c.isSaved)
                    c.isSaved = false;
                CardLayout card = (CardLayout)toolsPanel.getLayout();
                card.show(toolsPanel, "rotatepanel");
                cardLayouts.put(selectedTabIndex, "rotatepanel");
                rotateCombo.addActionListener (new ActionListener () {
                    public void actionPerformed(ActionEvent e) 
                    {
                        String getangle = rotateCombo.getSelectedItem().toString();
                        Tools.Rotate.rotateAngle = Integer.parseInt(getangle);
                        BufferedImage myColorImage = (BufferedImage) c.getImage();
                        c.tool(0);
                        Image tem=deepCopy((BufferedImage)c.getImage());
                        c.undo.push(tem);

                        Image newimg = Tools.Rotate.Rotate(myColorImage);

                        c.removeAll();
                        c.Drawer(newimg);
                        c.repaint();
                    }
                });

                
            }
    }//GEN-LAST:event_rotateToolBtnActionPerformed

    private void rotateComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rotateComboActionPerformed

    private void printBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBtnActionPerformed
        JPanel imgprintpanel = getSelectedPanel();
        if(imgprintpanel != null)
        {
            PrinterJob print = PrinterJob.getPrinterJob();

            print.setPrintable (new Printable() 
            {    
              @Override
              public int print(Graphics pg, PageFormat pf, int pageIndex){
                if (pageIndex > 0){
                    return Printable.NO_SUCH_PAGE;
                }

                Graphics2D g2 = (Graphics2D) pg;
                g2.translate(pf.getImageableX(), pf.getImageableY());
                imgprintpanel.paint(g2);
                return Printable.PAGE_EXISTS;
              }
            });

            if(print.printDialog()) {
                try {
                    print.print();
                } catch (PrinterException ex) {
                    System.err.println(ex);
                }
            }
        }
    }//GEN-LAST:event_printBtnActionPerformed

    private void imgEnhanceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imgEnhanceBtnActionPerformed
        int index = jTabbedPane1.getSelectedIndex();
        if(index != -1)
        {

            lastImgValue = imgadjslider.getValue();
            
            Component temp= jTabbedPane1.getComponentAt(index);
            JScrollPane selected=(JScrollPane)temp;
            JViewport mypanel =(JViewport)selected.getComponent(0);
            JPanel t = (JPanel)mypanel.getComponent(0);
            DrawArea c =(DrawArea) t.getComponent(0);
            
            c.tool(8);
            if(!c.imgAdj && index != -1)
            {
                if(c.isSaved)
                    c.isSaved = false;
                BufferedImage myColorImage = (BufferedImage) c.getImage();
                c.imgAdj = true;
                CardLayout card = (CardLayout)toolsPanel.getLayout();
                card.show(toolsPanel, "imgadjpanel");
                cardLayouts.put(selectedTabIndex, "imgadjpanel");
                settingCombo.addActionListener (new ActionListener () {
                    public void actionPerformed(ActionEvent e) 
                    {
                        if(settingCombo.getSelectedItem().toString().equals("Brightness")){
                            Tools.ImageAdjuster.type = 0;
                            imgadjslider.setMaximum(20);
                        }
                        if(settingCombo.getSelectedItem().toString().equals("Reds")){
                            Tools.ImageAdjuster.type = 1;
                            imgadjslider.setMaximum(255);
                        }
                        
                        if(settingCombo.getSelectedItem().toString().equals("Blues")){
                            Tools.ImageAdjuster.type = 2;
                            imgadjslider.setMaximum(255);
                        }
                        if(settingCombo.getSelectedItem().toString().equals("Greens")){
                            Tools.ImageAdjuster.type = 3;
                            imgadjslider.setMaximum(255);
                        }
                        
                    }
                });
                
                imgadjslider.addChangeListener(new ChangeListener() {
                    @Override
                    public void stateChanged(ChangeEvent e) {
                         Tools.ImageAdjuster.value = imgadjslider.getValue();
                        if(Tools.ImageAdjuster.value  != 0)
                        {
                            c.tool(0);
                            Image tem = deepCopy((BufferedImage)c.getImage());
                            c.undo.push(tem);

                            Image newimg = Tools.ImageAdjuster.adjustImage(myColorImage);

                            c.removeAll();
                            c.Drawer(newimg);
                            c.repaint();
                        }
                    }
                });

            }
        }
    }//GEN-LAST:event_imgEnhanceBtnActionPerformed

    private void imgadjsliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_imgadjsliderStateChanged

    }//GEN-LAST:event_imgadjsliderStateChanged
    
    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        int x = jTabbedPane1.getTabCount() - 1 ;
        for(int i = x; i >= 0; i--)
        {
            if(!closeTabValidate(i))
            {
                logoutflag = true;
                jTabbedPane1.setSelectedIndex(i);
                break;
            }
           
        }
        if(!logoutflag)
        {
            this.dispose();
            User.currentUser = null;
            new loginScreen.LoginFrame().setVisible(true);
        }
    }//GEN-LAST:event_logoutBtnActionPerformed
   
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditorMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditorMain().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ConfigPanel;
    private javax.swing.JPanel EditorPanel;
    private javax.swing.JLabel SizeLbl;
    private javax.swing.JButton TextBtn;
    private javax.swing.JLabel angleLbl;
    private javax.swing.JMenuItem blueBtn;
    public static javax.swing.JPanel bottomPanel;
    private javax.swing.JPanel brushToolPanel;
    private javax.swing.JComboBox<String> brushTypeCombo;
    private javax.swing.JSpinner brushsize;
    private javax.swing.JPanel bucketpanel;
    private javax.swing.JMenuItem bwBtn;
    private javax.swing.JButton colorChooserBtn;
    private javax.swing.JButton cropBtn;
    private javax.swing.JSpinner eraserSize;
    private javax.swing.JButton eraserTool;
    private javax.swing.JPanel eraserToolPanel;
    private javax.swing.JRadioButton fillCheck;
    private javax.swing.JMenu filtersMenu;
    private javax.swing.JMenuItem greenBtn;
    private javax.swing.JButton imgEnhanceBtn;
    private javax.swing.JPanel imgadjpanel;
    private javax.swing.JSlider imgadjslider;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JSlider jSlider1;
    public static javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem logoutBtn;
    private javax.swing.JMenuItem medianBtn;
    private javax.swing.JButton membershipBtn;
    private javax.swing.JMenuItem mirrorBtn;
    private javax.swing.JMenuItem negativeBtn;
    private javax.swing.JMenuItem newImgBtn;
    private javax.swing.JMenuItem openCamera;
    private javax.swing.JMenuItem openImgBtn;
    private javax.swing.JButton paintBrushBtn;
    private javax.swing.JButton paintBucketBtn;
    private javax.swing.JMenuItem printBtn;
    private javax.swing.JMenuItem redBtn;
    private javax.swing.JMenuItem redoBtn;
    private javax.swing.JMenu rgbColors;
    private javax.swing.JComboBox<String> rotateCombo;
    private javax.swing.JButton rotateToolBtn;
    private javax.swing.JPanel rotatepanel;
    private static javax.swing.JMenuItem saveImgBtn;
    private javax.swing.JMenuItem sepiaBtn;
    private javax.swing.JLabel setValLbl;
    private javax.swing.JComboBox<String> settingCombo;
    private javax.swing.JButton shapeBtn;
    private javax.swing.JComboBox<String> shapeCombo;
    private javax.swing.JPanel shapepanel;
    private javax.swing.JButton socialBtn;
    private javax.swing.JComboBox<String> strokeCombo;
    private javax.swing.JLabel strokeLbl;
    private javax.swing.JLabel textHelpLbl;
    private javax.swing.JPanel textpanel;
    private javax.swing.JPanel tipPanel;
    private javax.swing.JPanel toolsPanel;
    private javax.swing.JLabel typelbl;
    private javax.swing.JLabel typelbl1;
    private javax.swing.JMenuItem undoBtn;
    public static javax.swing.JMenuItem uploadImgBtn;
    // End of variables declaration//GEN-END:variables

}
